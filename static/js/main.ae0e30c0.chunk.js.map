{"version":3,"sources":["components/Header.js","components/Footer.js","components/Frame.js","components/Park.js","components/ActivityList.js","components/ActivityFinder.js","App.js","reportWebVitals.js","index.js"],"names":["Header","src","alt","className","Footer","href","Frame","source","title","url","status","description","Park","props","toggleButtonState","state","buttonEnabled","setState","fetch","data","fullName","apiKey","then","response","json","newCamLinks","i","length","push","camLinks","container","buttonMessage","this","entries","entry","message","React","createElement","name","states","designation","target","rel","onClick","Component","ActivityList","onChange","event","a","parks","activity","activities","value","text","parentCallback","Dropdown","placeholder","search","selection","options","allActivities","act","key","ActivityFinder","onSelectActivity","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ae0e30c0.chunk.js","sourcesContent":["import React from 'react'\nimport './Header.css'\n\n// The Header component serves as the top of the website. It displays the website title and a\n// background image to make the website have a more immersive experience.\nconst Header = () => {\n    return (\n        <div>\n            <img src=\"./pictures/header-background.jpg\" alt=\"header-background\" className=\"headerBackground\"></img>\n            <div className=\"header\">\n                <h1>National Parks Activity Finder</h1>\n            </div>\n        </div>\n    )\n}\n\nexport default Header\n","import React from 'react'\nimport './Footer.css'\n\n// The Footer component serves as the bottom of the website. It displays all of the sources and\n// other information regarding the National Park Service and the API I used.\nconst Footer = () => {\n    return (\n        <div>\n            <div className=\"footer\">\n                <h1>National Parks Activity Finder</h1>\n                <a href=\"https://www.nps.gov/subjects/developer/api-documentation.htm#/\">National Parks Service API</a>\n                <a href=\"https://www.nps.gov/index.htm\">National Parks Service Website</a>\n                <img src=\"./pictures/nps-logo.png\" alt=\"NPS logo\" className=\"footerBackground\"></img>\n            </div>\n        </div>\n    )\n}\n\nexport default Footer","import React from 'react'\nimport './Frame.css'\n\n// Frame holds the webcam information.\nconst Frame = (source) => {\n    return (\n        <div>\n            <div className=\"title\">\n                <h3>{source.source.title} Webcam</h3>\n                <p>Scroll down in the below frame to see the webcam</p>\n            </div>\n            <iframe src={source.source.url} title={source.source.url}></iframe>\n            <div className=\"status\">\n                <p>Status:&nbsp;</p>\n                <p className={source.source.status}>{source.source.status}</p>\n            </div>\n            <div className=\"description\">\n                <p>Description:</p>\n                <p>{source.source.description}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Frame","import React from 'react'\nimport Frame from './Frame'\nimport './Park.css'\n\n// Park holds all information related to a specific park.\nclass Park extends React.Component {\n    constructor(props) {\n        super(props)\n        // The park json and apiKey values are taken from the parent component ActivityList.\n        // \n        // KEY:\n        // apiKey - my api key to make requests\n        // data - All webcam information related to this park as json\n        // buttonEnabled - Whether the View Webcams button is enabled or not\n        // camLinks - List of all camera links available at this park\n        this.state = {\n            apiKey: this.props.apiKey,\n            data: this.props.data,\n            buttonEnabled: false,\n            camLinks: []\n        }\n    }\n\n    // toggleButtonState is called when the View Webcams button is clicked.\n    toggleButtonState = () => {\n        // If the webcams are disabled, then enable them.\n        if(!this.state.buttonEnabled) {\n            // API call to get all webcam information at this park.\n            fetch(`https://developer.nps.gov/api/v1/webcams?q=${this.props.data.fullName}&api_key=${this.state.apiKey}`)\n            .then(response => response.json())\n            .then(json => {\n                // newCamLinks starts out empty but adds each webcam.\n                var newCamLinks = [];\n                // Iterate through each row of webcam information in the json.\n                for(var i = 0; i < json.data.length; i++) {\n                    // Each webcam json data is added to the newCamLinks array.\n                    newCamLinks.push(json.data[i]);\n                }\n                // camLinks is updated with the new list of camLinks.\n                this.setState({\n                    buttonEnabled: true,\n                    camLinks: newCamLinks\n                })\n            })\n        }\n        // If the webcams are enabled, then disable them.\n        else {\n            this.setState({\n                buttonEnabled: false\n            })\n        }\n    }\n\n    // render generates the park information.\n    render() {\n        // container holds all of the webcam information and the webcams.\n        var container;\n        // buttonMessage is the text on the button that enables/disables webcams.\n        var buttonMessage;\n         // If the webcams are enabled.\n        if(this.state.buttonEnabled) {\n            // Set button text to \"Close Webcams\" because the webcams are already enabled.\n            buttonMessage = \"Close Webcams\";\n            // entries starts out empty but adds webcam frames.\n            var entries = []\n            // Iterate through each row of webcam information in the json.\n            for(var i = 0; i < this.state.camLinks.length; i++) {\n                // Create an entry for each webcam that contains all webcam information.\n                // The webcam json is passed to the Frame component.\n                var entry = <Frame source={this.state.camLinks[i]}/>\n                // Each webcam frame is added to the newCamLinks array.\n                entries.push(entry)\n            }\n            // If there are no webcams available at this park.\n            if(entries.length === 0) {\n                var message = React.createElement(\"p\", {}, \"There are no webcams for this park\")\n                // Set the container to a div with the message that there are no webcams.\n                container = React.createElement(\"div\", {}, [message])\n            }\n            // If there is at least 1 webcam available at this park.\n            else {\n                // Set the container to a div with all the webcam frames.\n                container = React.createElement(\"div\", {}, [entries])\n            }\n        }\n        // If the webcams are disabled.\n        else {\n            // Set button text to \"View Webcams\" because the webcams are already disabled.\n            buttonMessage = \"View Webcams\";\n            // Set the container to an empty div.\n            container = React.createElement(\"div\", {});\n        }\n        return(\n            // Return a div with all park information, including webcams.\n            <div className=\"box\">\n                <h3>{this.props.data.fullName}</h3>\n                <p>Nickname: {this.props.data.name}</p>\n                <p>Location: {this.props.data.states}</p>\n                <p>Designation: {this.props.data.designation}</p>\n                <a href={this.props.data.url} target=\"_blank\" rel=\"noreferrer\">Learn more about {this.props.data.name}</a>\n                {container}\n                {/* When the button is clicked, toggleButtonState is called. */}\n                <button onClick={this.toggleButtonState}>{buttonMessage}</button>\n            </div>\n        )\n    }\n}\n\nexport default Park","import React from 'react'\nimport Park from './Park'\nimport {Dropdown} from 'semantic-ui-react'\n\n// ActivityList holds the activity dropdown and the list of parks associated with the specified activity.\nclass ActivityList extends React.Component {\n    constructor(props) {\n        super(props)\n        // The activity and apiKey values are taken from the parent component ActivityFinder.\n        // The activities and parks values are handled by ActivityList.\n        // \n        // KEY:\n        // activity - current selected activity (based upon dropdown value)\n        // apiKey - my api key to make requests\n        // activities - all possible activities at National Parks\n        // parks - all parks associated with the currently-selected activity\n        this.state = {\n            activity: this.props.activity,\n            apiKey: this.props.apiKey,\n            activities: [],\n            parks: [],\n        }\n    }\n\n    // onChange is called when the currently-selected activity changes based upon user input.\n    onChange = async (event, data) => {\n        // parks is cleared and activity is set to the new activity.\n        this.setState((state, props) => ({\n            parks: [],\n            activity: this.state.activities[data.value].text,\n        }))\n        // The new activity value is sent to ActivityFinder.\n        // await is used to ensure the callback finishes before the parks are updated.\n        await this.props.parentCallback(this.state.activities[data.value].text)\n        // API call to get all parks associated with the newly-selected activity.\n        fetch(`https://developer.nps.gov/api/v1/activities/parks?q=${this.state.activity}&api_key=${this.state.apiKey}`)\n        .then(response => response.json())\n        .then(json => {\n                this.setState({\n                parks: json[\"data\"][0][\"parks\"]\n            })\n        })\n    }\n    \n    // render generates the dropdown list and the list of parks associated with the currently-selected\n    // activity as well as the park information.\n    render() {\n        // entries starts out empty but adds Park elements.\n        var entries = []\n        // Iterate through each park json in the parks array.\n        for(var i = 0; i < this.state.parks.length; i++) {\n            // Create an entry for each park that contains all necessary park information.\n            // The apiKey and park json are sent to the Park component for more api calls.\n            var entry = <Park apiKey={this.state.apiKey} data={this.state.parks[i]}/>\n            // The park entry is added to the entries array.\n            entries.push(entry)\n        }\n        // The div container holds all park entries.\n        var container = React.createElement(\"div\", {}, [entries])\n        return (\n            <div className=\"dropdown\">\n                {/* The dropdown holds all the activities at the National Parks. */}\n                {/* The dropdown calls onChange when the selected activity value changes. */}\n                <Dropdown\n                    placeholder=\"Activity\"\n                    search\n                    selection\n                    options={this.state.activities}\n                    onChange={this.onChange}\n                />\n                {/* The container of park entries is displayed. */}\n                {container}\n            </div>\n        )\n    }\n\n    // componentDidMount is called when this component is created. An api call is made to get\n    // all the activities possible at National Parks.\n    componentDidMount() {\n        // API call to get all activities.\n        fetch(`https://developer.nps.gov/api/v1/activities?api_key=${this.state.apiKey}`)\n        .then(response => response.json())\n        .then(json => {\n            // allActivities starts out empty but adds possible activities.\n            const allActivities = []\n            // Iterate through all 40 activities.\n            for(var i = 0; i < 40; i++) {\n                // act is an object that holds specific traits related to each activity.\n                // The key -value pair is needed for the dropdown and the text allows the\n                // user to visually understand what the activity is.\n                const act = {}\n                act.key = i\n                act.text = json.data[i].name\n                act.value = i\n                // Each activity object is added to the allActivities array.\n                allActivities.push(act)\n            }\n            // activities is updated with the new activities.\n            this.setState({\n                activities: allActivities\n            })\n        })\n    }\n}\n\nexport default ActivityList","import React from 'react'\nimport ActivityList from './ActivityList'\nimport './ActivityFinder.css'\n\n// The ActivityFinder component is the parent class to the ActivityList and handles the state data of\n// the child component. The current activity that is selected is saved here as well as the api key\n// for the website to make requests with. Most of the activity finder work is done in the activity \n// list component.\nclass ActivityFinder extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            activity: null,\n            apiKey: \"0XkmR8Mz014oPPOfysNPBEKqSSQKbP25wtEXgQTa\"\n        }\n    }\n\n    // activity is updated when parentCallback is called by ActivityList.\n    onSelectActivity = (data) => {\n        this.setState({\n            activity: data\n        })\n    }\n\n    render() {\n        return(\n            <div className = \"list\">\n                <h2>Select Activity</h2>\n                <div className = \"list\" >\n                    {/* activity and apiKey are passed down for ActivityList to have as the state. */}\n                    {/* parentCallback is called when ActivityList changes the value of the activity dropdown. */}\n                    <ActivityList activity={this.state.activity} apiKey={this.state.apiKey} parentCallback={this.onSelectActivity}/>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ActivityFinder","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Header from './components/Header'\nimport Footer from './components/Footer'\nimport ActivityFinder from './components/ActivityFinder'\n\n// The App component holds the three main components of the website - the header, the activity finder,\n// and the footer. The bulk of the work is done in the activity finder.\nconst App = () => {\n  // The outer-middle-inner structure was designed to horizontally and vertically center the\n  // elements inside of the inner class, which is where the ActivityFinder component is in.\n  return (\n    <div className=\"outer\">\n      <div className=\"middle\">\n      <Header/>\n        <div className=\"inner\">\n          <ActivityFinder/>\n        </div>\n        <Footer/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}